/* automatically generated by rust-bindgen */

pub type DWORD = ::std::os::raw::c_ulong;
pub type BOOL = ::std::os::raw::c_int;
pub type LPVOID = *mut ::std::os::raw::c_void;
pub type ULONG_PTR = ::std::os::raw::c_ulonglong;
pub type SIZE_T = ULONG_PTR;
pub type HANDLE = *mut ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug)]
pub struct CNktHookLib {
    pub lpInternals: LPVOID,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct CNktHookLib_tagHOOK_INFO {
    pub nHookId: SIZE_T,
    pub lpProcToHook: LPVOID,
    pub lpNewProcAddr: LPVOID,
    pub lpCallOriginal: LPVOID,
}
#[test]
fn bindgen_test_layout_CNktHookLib_tagHOOK_INFO() {
    assert_eq!(::std::mem::size_of::<CNktHookLib_tagHOOK_INFO>() , 32usize ,
               concat ! (
               "Size of: " , stringify ! ( CNktHookLib_tagHOOK_INFO ) ));
    assert_eq! (::std::mem::align_of::<CNktHookLib_tagHOOK_INFO>() , 8usize ,
                concat ! (
                "Alignment of " , stringify ! ( CNktHookLib_tagHOOK_INFO ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const CNktHookLib_tagHOOK_INFO ) ) . nHookId as
                * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! (
                CNktHookLib_tagHOOK_INFO ) , "::" , stringify ! ( nHookId )
                ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const CNktHookLib_tagHOOK_INFO ) ) .
                lpProcToHook as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! (
                CNktHookLib_tagHOOK_INFO ) , "::" , stringify ! ( lpProcToHook
                ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const CNktHookLib_tagHOOK_INFO ) ) .
                lpNewProcAddr as * const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! (
                CNktHookLib_tagHOOK_INFO ) , "::" , stringify ! (
                lpNewProcAddr ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const CNktHookLib_tagHOOK_INFO ) ) .
                lpCallOriginal as * const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! (
                CNktHookLib_tagHOOK_INFO ) , "::" , stringify ! (
                lpCallOriginal ) ));
}
impl Clone for CNktHookLib_tagHOOK_INFO {
    fn clone(&self) -> Self { *self }
}
pub type CNktHookLib_HOOK_INFO = CNktHookLib_tagHOOK_INFO;
pub type CNktHookLib_LPHOOK_INFO = *mut CNktHookLib_tagHOOK_INFO;
#[test]
fn bindgen_test_layout_CNktHookLib() {
    assert_eq!(::std::mem::size_of::<CNktHookLib>() , 8usize , concat ! (
               "Size of: " , stringify ! ( CNktHookLib ) ));
    assert_eq! (::std::mem::align_of::<CNktHookLib>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( CNktHookLib ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const CNktHookLib ) ) . lpInternals as * const
                _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( CNktHookLib ) , "::" ,
                stringify ! ( lpInternals ) ));
}
extern "C" {
    #[link_name = "?Hook@CNktHookLib@@QEAAKPEA_KPEAPEAXPEAX2K@Z"]
    pub fn CNktHookLib_Hook(this: *mut CNktHookLib, lpnHookId: *mut SIZE_T,
                            lplpCallOriginal: *mut LPVOID,
                            lpProcToHook: LPVOID, lpNewProcAddr: LPVOID,
                            dwFlags: DWORD) -> DWORD;
}
extern "C" {
    #[link_name = "?Hook@CNktHookLib@@QEAAKQEAUtagHOOK_INFO@1@_KK@Z"]
    pub fn CNktHookLib_Hook1(this: *mut CNktHookLib,
                             aHookInfo: *mut CNktHookLib_HOOK_INFO,
                             nCount: SIZE_T, dwFlags: DWORD) -> DWORD;
}
extern "C" {
    #[link_name = "?Hook@CNktHookLib@@QEAAKQEAPEAUtagHOOK_INFO@1@_KK@Z"]
    pub fn CNktHookLib_Hook2(this: *mut CNktHookLib,
                             aHookInfo: *mut CNktHookLib_LPHOOK_INFO,
                             nCount: SIZE_T, dwFlags: DWORD) -> DWORD;
}
extern "C" {
    #[link_name = "?RemoteHook@CNktHookLib@@QEAAKPEA_KPEAPEAXKPEAX2K@Z"]
    pub fn CNktHookLib_RemoteHook(this: *mut CNktHookLib,
                                  lpnHookId: *mut SIZE_T,
                                  lplpCallOriginal: *mut LPVOID, dwPid: DWORD,
                                  lpProcToHook: LPVOID, lpNewProcAddr: LPVOID,
                                  dwFlags: DWORD) -> DWORD;
}
extern "C" {
    #[link_name = "?RemoteHook@CNktHookLib@@QEAAKQEAUtagHOOK_INFO@1@_KKK@Z"]
    pub fn CNktHookLib_RemoteHook1(this: *mut CNktHookLib,
                                   aHookInfo: *mut CNktHookLib_HOOK_INFO,
                                   nCount: SIZE_T, dwPid: DWORD,
                                   dwFlags: DWORD) -> DWORD;
}
extern "C" {
    #[link_name =
          "?RemoteHook@CNktHookLib@@QEAAKQEAPEAUtagHOOK_INFO@1@_KKK@Z"]
    pub fn CNktHookLib_RemoteHook2(this: *mut CNktHookLib,
                                   aHookInfo: *mut CNktHookLib_LPHOOK_INFO,
                                   nCount: SIZE_T, dwPid: DWORD,
                                   dwFlags: DWORD) -> DWORD;
}
extern "C" {
    #[link_name = "?RemoteHook@CNktHookLib@@QEAAKPEA_KPEAPEAXPEAX22K@Z"]
    pub fn CNktHookLib_RemoteHook3(this: *mut CNktHookLib,
                                   lpnHookId: *mut SIZE_T,
                                   lplpCallOriginal: *mut LPVOID,
                                   hProcess: HANDLE, lpProcToHook: LPVOID,
                                   lpNewProcAddr: LPVOID, dwFlags: DWORD)
     -> DWORD;
}
extern "C" {
    #[link_name =
          "?RemoteHook@CNktHookLib@@QEAAKQEAUtagHOOK_INFO@1@_KPEAXK@Z"]
    pub fn CNktHookLib_RemoteHook4(this: *mut CNktHookLib,
                                   aHookInfo: *mut CNktHookLib_HOOK_INFO,
                                   nCount: SIZE_T, hProcess: HANDLE,
                                   dwFlags: DWORD) -> DWORD;
}
extern "C" {
    #[link_name =
          "?RemoteHook@CNktHookLib@@QEAAKQEAPEAUtagHOOK_INFO@1@_KPEAXK@Z"]
    pub fn CNktHookLib_RemoteHook5(this: *mut CNktHookLib,
                                   aHookInfo: *mut CNktHookLib_LPHOOK_INFO,
                                   nCount: SIZE_T, hProcess: HANDLE,
                                   dwFlags: DWORD) -> DWORD;
}
extern "C" {
    #[link_name = "?Unhook@CNktHookLib@@QEAAK_K@Z"]
    pub fn CNktHookLib_Unhook(this: *mut CNktHookLib, nHookId: SIZE_T)
     -> DWORD;
}
extern "C" {
    #[link_name = "?Unhook@CNktHookLib@@QEAAKQEAUtagHOOK_INFO@1@_K@Z"]
    pub fn CNktHookLib_Unhook1(this: *mut CNktHookLib,
                               aHookInfo: *mut CNktHookLib_HOOK_INFO,
                               nCount: SIZE_T) -> DWORD;
}
extern "C" {
    #[link_name = "?Unhook@CNktHookLib@@QEAAKQEAPEAUtagHOOK_INFO@1@_K@Z"]
    pub fn CNktHookLib_Unhook2(this: *mut CNktHookLib,
                               aHookInfo: *mut CNktHookLib_LPHOOK_INFO,
                               nCount: SIZE_T) -> DWORD;
}
extern "C" {
    #[link_name = "?UnhookProcess@CNktHookLib@@QEAAXK@Z"]
    pub fn CNktHookLib_UnhookProcess(this: *mut CNktHookLib, dwPid: DWORD);
}
extern "C" {
    #[link_name = "?UnhookAll@CNktHookLib@@QEAAXXZ"]
    pub fn CNktHookLib_UnhookAll(this: *mut CNktHookLib);
}
extern "C" {
    #[link_name = "?RemoveHook@CNktHookLib@@QEAAK_KH@Z"]
    pub fn CNktHookLib_RemoveHook(this: *mut CNktHookLib, nHookId: SIZE_T,
                                  bDisable: BOOL) -> DWORD;
}
extern "C" {
    #[link_name = "?RemoveHook@CNktHookLib@@QEAAKQEAUtagHOOK_INFO@1@_KH@Z"]
    pub fn CNktHookLib_RemoveHook1(this: *mut CNktHookLib,
                                   aHookInfo: *mut CNktHookLib_HOOK_INFO,
                                   nCount: SIZE_T, bDisable: BOOL) -> DWORD;
}
extern "C" {
    #[link_name = "?RemoveHook@CNktHookLib@@QEAAKQEAPEAUtagHOOK_INFO@1@_KH@Z"]
    pub fn CNktHookLib_RemoveHook2(this: *mut CNktHookLib,
                                   aHookInfo: *mut CNktHookLib_LPHOOK_INFO,
                                   nCount: SIZE_T, bDisable: BOOL) -> DWORD;
}
extern "C" {
    #[link_name = "?EnableHook@CNktHookLib@@QEAAK_KH@Z"]
    pub fn CNktHookLib_EnableHook(this: *mut CNktHookLib, nHookId: SIZE_T,
                                  bEnable: BOOL) -> DWORD;
}
extern "C" {
    #[link_name = "?EnableHook@CNktHookLib@@QEAAKQEAUtagHOOK_INFO@1@_KH@Z"]
    pub fn CNktHookLib_EnableHook1(this: *mut CNktHookLib,
                                   aHookInfo: *mut CNktHookLib_HOOK_INFO,
                                   nCount: SIZE_T, bEnable: BOOL) -> DWORD;
}
extern "C" {
    #[link_name = "?EnableHook@CNktHookLib@@QEAAKQEAPEAUtagHOOK_INFO@1@_KH@Z"]
    pub fn CNktHookLib_EnableHook2(this: *mut CNktHookLib,
                                   aHookInfo: *mut CNktHookLib_LPHOOK_INFO,
                                   nCount: SIZE_T, bEnable: BOOL) -> DWORD;
}
extern "C" {
    #[link_name = "?SetSuspendThreadsWhileHooking@CNktHookLib@@QEAAKH@Z"]
    pub fn CNktHookLib_SetSuspendThreadsWhileHooking(this: *mut CNktHookLib,
                                                     bEnable: BOOL) -> DWORD;
}
extern "C" {
    #[link_name = "?GetSuspendThreadsWhileHooking@CNktHookLib@@QEAAHXZ"]
    pub fn CNktHookLib_GetSuspendThreadsWhileHooking(this: *mut CNktHookLib)
     -> BOOL;
}
extern "C" {
    #[link_name = "?SetEnableDebugOutput@CNktHookLib@@QEAAKH@Z"]
    pub fn CNktHookLib_SetEnableDebugOutput(this: *mut CNktHookLib,
                                            bEnable: BOOL) -> DWORD;
}
extern "C" {
    #[link_name = "?GetEnableDebugOutput@CNktHookLib@@QEAAHXZ"]
    pub fn CNktHookLib_GetEnableDebugOutput(this: *mut CNktHookLib) -> BOOL;
}
extern "C" {
    #[link_name = "??0CNktHookLib@@QEAA@XZ"]
    pub fn CNktHookLib_CNktHookLib(this: *mut CNktHookLib);
}
extern "C" {
    #[link_name = "??1CNktHookLib@@QEAA@XZ"]
    pub fn CNktHookLib_CNktHookLib_destructor(this: *mut CNktHookLib);
}
impl CNktHookLib {
    #[inline]
    pub unsafe fn Hook(&mut self, lpnHookId: *mut SIZE_T,
                       lplpCallOriginal: *mut LPVOID, lpProcToHook: LPVOID,
                       lpNewProcAddr: LPVOID, dwFlags: DWORD) -> DWORD {
        CNktHookLib_Hook(self, lpnHookId, lplpCallOriginal, lpProcToHook,
                         lpNewProcAddr, dwFlags)
    }
    #[inline]
    pub unsafe fn Hook1(&mut self, aHookInfo: *mut CNktHookLib_HOOK_INFO,
                        nCount: SIZE_T, dwFlags: DWORD) -> DWORD {
        CNktHookLib_Hook1(self, aHookInfo, nCount, dwFlags)
    }
    #[inline]
    pub unsafe fn Hook2(&mut self, aHookInfo: *mut CNktHookLib_LPHOOK_INFO,
                        nCount: SIZE_T, dwFlags: DWORD) -> DWORD {
        CNktHookLib_Hook2(self, aHookInfo, nCount, dwFlags)
    }
    #[inline]
    pub unsafe fn RemoteHook(&mut self, lpnHookId: *mut SIZE_T,
                             lplpCallOriginal: *mut LPVOID, dwPid: DWORD,
                             lpProcToHook: LPVOID, lpNewProcAddr: LPVOID,
                             dwFlags: DWORD) -> DWORD {
        CNktHookLib_RemoteHook(self, lpnHookId, lplpCallOriginal, dwPid,
                               lpProcToHook, lpNewProcAddr, dwFlags)
    }
    #[inline]
    pub unsafe fn RemoteHook1(&mut self,
                              aHookInfo: *mut CNktHookLib_HOOK_INFO,
                              nCount: SIZE_T, dwPid: DWORD, dwFlags: DWORD)
     -> DWORD {
        CNktHookLib_RemoteHook1(self, aHookInfo, nCount, dwPid, dwFlags)
    }
    #[inline]
    pub unsafe fn RemoteHook2(&mut self,
                              aHookInfo: *mut CNktHookLib_LPHOOK_INFO,
                              nCount: SIZE_T, dwPid: DWORD, dwFlags: DWORD)
     -> DWORD {
        CNktHookLib_RemoteHook2(self, aHookInfo, nCount, dwPid, dwFlags)
    }
    #[inline]
    pub unsafe fn RemoteHook3(&mut self, lpnHookId: *mut SIZE_T,
                              lplpCallOriginal: *mut LPVOID, hProcess: HANDLE,
                              lpProcToHook: LPVOID, lpNewProcAddr: LPVOID,
                              dwFlags: DWORD) -> DWORD {
        CNktHookLib_RemoteHook3(self, lpnHookId, lplpCallOriginal, hProcess,
                                lpProcToHook, lpNewProcAddr, dwFlags)
    }
    #[inline]
    pub unsafe fn RemoteHook4(&mut self,
                              aHookInfo: *mut CNktHookLib_HOOK_INFO,
                              nCount: SIZE_T, hProcess: HANDLE,
                              dwFlags: DWORD) -> DWORD {
        CNktHookLib_RemoteHook4(self, aHookInfo, nCount, hProcess, dwFlags)
    }
    #[inline]
    pub unsafe fn RemoteHook5(&mut self,
                              aHookInfo: *mut CNktHookLib_LPHOOK_INFO,
                              nCount: SIZE_T, hProcess: HANDLE,
                              dwFlags: DWORD) -> DWORD {
        CNktHookLib_RemoteHook5(self, aHookInfo, nCount, hProcess, dwFlags)
    }
    #[inline]
    pub unsafe fn Unhook(&mut self, nHookId: SIZE_T) -> DWORD {
        CNktHookLib_Unhook(self, nHookId)
    }
    #[inline]
    pub unsafe fn Unhook1(&mut self, aHookInfo: *mut CNktHookLib_HOOK_INFO,
                          nCount: SIZE_T) -> DWORD {
        CNktHookLib_Unhook1(self, aHookInfo, nCount)
    }
    #[inline]
    pub unsafe fn Unhook2(&mut self, aHookInfo: *mut CNktHookLib_LPHOOK_INFO,
                          nCount: SIZE_T) -> DWORD {
        CNktHookLib_Unhook2(self, aHookInfo, nCount)
    }
    #[inline]
    pub unsafe fn UnhookProcess(&mut self, dwPid: DWORD) {
        CNktHookLib_UnhookProcess(self, dwPid)
    }
    #[inline]
    pub unsafe fn UnhookAll(&mut self) { CNktHookLib_UnhookAll(self) }
    #[inline]
    pub unsafe fn RemoveHook(&mut self, nHookId: SIZE_T, bDisable: BOOL)
     -> DWORD {
        CNktHookLib_RemoveHook(self, nHookId, bDisable)
    }
    #[inline]
    pub unsafe fn RemoveHook1(&mut self,
                              aHookInfo: *mut CNktHookLib_HOOK_INFO,
                              nCount: SIZE_T, bDisable: BOOL) -> DWORD {
        CNktHookLib_RemoveHook1(self, aHookInfo, nCount, bDisable)
    }
    #[inline]
    pub unsafe fn RemoveHook2(&mut self,
                              aHookInfo: *mut CNktHookLib_LPHOOK_INFO,
                              nCount: SIZE_T, bDisable: BOOL) -> DWORD {
        CNktHookLib_RemoveHook2(self, aHookInfo, nCount, bDisable)
    }
    #[inline]
    pub unsafe fn EnableHook(&mut self, nHookId: SIZE_T, bEnable: BOOL)
     -> DWORD {
        CNktHookLib_EnableHook(self, nHookId, bEnable)
    }
    #[inline]
    pub unsafe fn EnableHook1(&mut self,
                              aHookInfo: *mut CNktHookLib_HOOK_INFO,
                              nCount: SIZE_T, bEnable: BOOL) -> DWORD {
        CNktHookLib_EnableHook1(self, aHookInfo, nCount, bEnable)
    }
    #[inline]
    pub unsafe fn EnableHook2(&mut self,
                              aHookInfo: *mut CNktHookLib_LPHOOK_INFO,
                              nCount: SIZE_T, bEnable: BOOL) -> DWORD {
        CNktHookLib_EnableHook2(self, aHookInfo, nCount, bEnable)
    }
    #[inline]
    pub unsafe fn SetSuspendThreadsWhileHooking(&mut self, bEnable: BOOL)
     -> DWORD {
        CNktHookLib_SetSuspendThreadsWhileHooking(self, bEnable)
    }
    #[inline]
    pub unsafe fn GetSuspendThreadsWhileHooking(&mut self) -> BOOL {
        CNktHookLib_GetSuspendThreadsWhileHooking(self)
    }
    #[inline]
    pub unsafe fn SetEnableDebugOutput(&mut self, bEnable: BOOL) -> DWORD {
        CNktHookLib_SetEnableDebugOutput(self, bEnable)
    }
    #[inline]
    pub unsafe fn GetEnableDebugOutput(&mut self) -> BOOL {
        CNktHookLib_GetEnableDebugOutput(self)
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::uninitialized();
        CNktHookLib_CNktHookLib(&mut __bindgen_tmp);
        __bindgen_tmp
    }
    #[inline]
    pub unsafe fn destruct(&mut self) {
        CNktHookLib_CNktHookLib_destructor(self)
    }
}
